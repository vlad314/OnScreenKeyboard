{"version":3,"sources":["components/keyboard.module.css","components/box.js","components/keys/key.js","components/keyboard.js","components/history.js","containers/Core.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Box","text","updateCursor","getCursor","textBox","useRef","console","log","useEffect","current","focus","setSelectionRange","className","value","onClick","event","s","target","selectionStart","ref","Key","classN","buttonId","onPressKey","id","Keyboard","caps","classes","keyboardGrid","kbrow1","longRow","map","el","index","key","shortRow","kbrow2","kbrow3","kbrow4","spaceBar","History","history","addState","textString","Core","props","useState","currentCh","cursorPos","uppercase","inputState","setInputState","historyState","setHistoryState","c","prevInputState","character","before","after","newTextString","substr","concat","toUpperCase","temp","tempList","push","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.678bb46a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"keyInv\":\"keyboard_keyInv__2NxVa\",\"keyCaps\":\"keyboard_keyCaps__2K40q\",\"spaceBar\":\"keyboard_spaceBar__5nwUU\",\"longRow\":\"keyboard_longRow__38SbI\",\"shortRow\":\"keyboard_shortRow__le7cc\",\"keyboardGrid\":\"keyboard_keyboardGrid__WE96x\",\"kbrow1\":\"keyboard_kbrow1__1THud\",\"kbrow2\":\"keyboard_kbrow2__1Xj0U\",\"kbrow3\":\"keyboard_kbrow3__3h9ZO\",\"kbrow4\":\"keyboard_kbrow4__1d9G3\"};","import React, {useEffect, useRef} from 'react';\r\nimport './box.css';\r\n\r\nconst Box = ({text, updateCursor, getCursor}) => {\r\n  \r\n  let textBox = useRef(null);\r\n  console.log(\"in box cursor\" + getCursor);\r\n\r\n  useEffect(() => {\r\n    textBox.current.focus();\r\n    textBox.current.setSelectionRange(getCursor,getCursor);\r\n  }, [text,getCursor]);\r\n\r\n  const cursorSel = event => {\r\n    let s = event.target.selectionStart;\r\n    console.log(\"in box \" +s);\r\n    updateCursor(s);\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <textarea className=\"textBox\" value={text}  onClick={cursorSel} ref={textBox} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Box;","import React from 'react';\r\nimport \"./key.css\";\r\n\r\nconst Key = ({classN, buttonId, onPressKey}) => {\r\n  const writeCh = event => {\r\n    onPressKey(buttonId);\r\n  }  \r\n\r\n  return (\r\n    <button className={classN} id={buttonId} onClick={writeCh}>{buttonId}</button>\r\n  )\r\n}\r\n\r\nexport default Key;","import React from 'react';\r\n\r\nimport Key from './keys/key.js';\r\nimport classes from \"./keyboard.module.css\";\r\n\r\nconst Keyboard = ({caps, onPressKey}) => {\r\n  //for encrypting the text\r\n  let row10 = ['1','2','3','4','5','6','7','8','9','0'];//,'(',')'];\r\n  let row11 = ['(',')'];\r\n  let keyBkp = 'Backspace';\r\n  let row20 = ['q','w','e','r','t','y','u','i','o','p'];//,'{','}'];\r\n  let row21 = ['{','}'];\r\n  let row30 = ['a','s','d','f','g','h','j','k','l']//,';','@'];\r\n  let row31  = [';','@','#'];\r\n  let keyCaps = 'CapsLock';\r\n  let keyBksl = ['\\\\'];\r\n  let row40 = ['z','x','c','v','b','n','m'];\r\n  let row41 = [',','.','?'];\r\n  let Space = ' ';\r\n\r\n  // let keys = {keyA:chars[0], keyB:chars[1]};\r\n  // let keyBkp = 'Bkp';\r\n  // let keyCaps = 'Caps';\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.keyboardGrid}>\r\n\r\n        <div className={classes.kbrow1}>\r\n          <div className={classes.longRow}>\r\n          <Key   classN=\"keyRst\" buttonId=\"Reset\" onPressKey={onPressKey} />\r\n          {row10.map((el, index) => {\r\n              console.log(\"el\");\r\n              console.log(el);\r\n              return <Key key={index} classN=\"key\" buttonId={el} onPressKey={onPressKey} />\r\n            })}\r\n            </div>\r\n            <div className={classes.shortRow}>\r\n            {row11.map((el, index) => {\r\n              console.log(\"el\");\r\n              console.log(el);\r\n              return <Key key={index} classN=\"key\" buttonId={el} onPressKey={onPressKey} />\r\n            })}\r\n            </div>\r\n            <Key   classN=\"keyBkp\" buttonId={keyBkp} onPressKey={onPressKey} />\r\n        </div>\r\n\r\n        <div className={classes.kbrow2}>\r\n        <Key  classN=\"keyInv\" buttonId=\"\" onPressKey={onPressKey} />\r\n          <div className={classes.longRow}>\r\n            {row20.map((el, index) => {\r\n                console.log(\"el\");\r\n                console.log(el);\r\n                return <Key key={index}  classN=\"key\" buttonId={el} onPressKey={onPressKey}/>\r\n              })}\r\n          </div>\r\n          <div className={classes.shortRow}>\r\n            {row21.map((el, index) => {\r\n                console.log(\"el\");\r\n                console.log(el);\r\n                return <Key key={index}  classN=\"key\" buttonId={el} onPressKey={onPressKey}/>\r\n              })}\r\n          </div>\r\n          <Key   classN=\"keyInv\" buttonId=\"\" onPressKey={onPressKey} />\r\n        </div>\r\n\r\n        <div className={classes.kbrow3}>\r\n        <Key   classN=\"keyCaps\" buttonId={keyCaps} onPressKey={onPressKey} />\r\n          <div className={classes.longRow}>\r\n            {row30.map((el, index) => {\r\n                console.log(\"el\");\r\n                console.log(el);\r\n                return <Key key={index}  classN=\"key\" buttonId={el}  onPressKey={onPressKey}/>\r\n              })}\r\n          </div>\r\n          <div className={classes.shortRow}>\r\n            {row31.map((el, index) => {\r\n                console.log(\"el\");\r\n                console.log(el);\r\n                return <Key key={index}  classN=\"key\" buttonId={el}  onPressKey={onPressKey}/>\r\n              })}\r\n          </div> \r\n        </div>\r\n\r\n        <div className={classes.kbrow4}>\r\n        <Key  classN=\"keyBksl\" buttonId={keyBksl} onPressKey={onPressKey} />\r\n          <div className={classes.longRow}>\r\n            {row40.map((el, index) => {\r\n              console.log(\"el\");\r\n              console.log(el);\r\n              return <Key key={index}  classN=\"key\" buttonId={el} onPressKey={onPressKey}/>\r\n            })}\r\n          </div>\r\n          <div className={classes.shortRow}>\r\n            {row41.map((el, index) => {\r\n              console.log(\"el\");\r\n              console.log(el);\r\n              return <Key key={index}  classN=\"key\" buttonId={el} onPressKey={onPressKey}/>\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className={classes.spaceBar}>\r\n          <Key  classN=\"key\" buttonId={Space} onPressKey={onPressKey} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Keyboard;","\r\nimport React from 'react';\r\nimport './history.css';\r\n\r\nconst History = ({history, addState}) => {\r\n  \r\n  const saveState = event => {\r\n    addState();\r\n  }  \r\n\r\n  return (\r\n    <div className=\"wrhItems\">\r\n      <button className=\"save\" onClick={saveState}>Save to history</button>\r\n      <div className=\"hItems\">\r\n        {history.map((el, index) => {\r\n          console.log(\"el\");\r\n          console.log(el);\r\n          return <div className=\"hItem\" key={index}>{el.textString}</div>\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default History;","import React, {useState, useEffect} from 'react';\r\n\r\nimport Box from \"../components/box.js\";\r\nimport Keyboard from \"../components/keyboard.js\";\r\nimport History from \"../components/history.js\";\r\nimport  \"./Core.css\";\r\n\r\nconst Core = props => {\r\n\r\n\r\n const[inputState, setInputState]  = useState({currentCh: \"\", textString: \"\", cursorPos:0, uppercase:false});\r\n const [historyState, setHistoryState] = useState([{}]);\r\n\r\n  const addStateHandler = () => {\r\n    let temp = {...inputState};\r\n    let tempList = [...historyState];\r\n    console.log(\"tempList\");\r\n    console.log(tempList);\r\n    tempList.push(temp);\r\n    setHistoryState(tempList);\r\n  }\r\n\r\n    const pressKey = character => {\r\n    let before = \"\";\r\n    let after = \"\";\r\n    let newTextString = \"\";\r\n    if (character === \"CapsLock\"){\r\n      setInputState(prevInputState => ({\r\n        currentCh: prevInputState.currentCh, \r\n        textString: prevInputState.textString, \r\n        cursorPos:prevInputState.cursorPos,\r\n        uppercase: !prevInputState.uppercase})\r\n      );\r\n    }\r\n    else if (character === \"Reset\"){\r\n      setInputState(prevInputState => ({\r\n        currentCh: character, \r\n        textString: \"\", \r\n        cursorPos:prevInputState.cursorPos-1,\r\n        uppercase: prevInputState.uppercase})\r\n      );\r\n    }\r\n    else if (character === \"Backspace\"){\r\n      before = inputState.textString.substr(0,inputState.cursorPos-1);\r\n      after = inputState.textString.substr(inputState.cursorPos);\r\n      newTextString = newTextString.concat(before);\r\n      newTextString = newTextString.concat(after);\r\n      setInputState(prevInputState => ({\r\n        currentCh: character, \r\n        textString: newTextString, \r\n        cursorPos:prevInputState.cursorPos-1,\r\n        uppercase: prevInputState.uppercase})\r\n      );\r\n    }\r\n    else {\r\n      before = inputState.textString.substr(0,inputState.cursorPos);\r\n      after = inputState.textString.substr(inputState.cursorPos);//change to cursorPos+1 for Insert\r\n      newTextString = newTextString.concat(before);\r\n      if (inputState.uppercase === true){\r\n        newTextString = newTextString.concat(character.toUpperCase());\r\n      } else {\r\n        newTextString = newTextString.concat(character);\r\n      }\r\n      newTextString = newTextString.concat(after);\r\n      setInputState(prevInputState => ({\r\n        currentCh: character, \r\n        textString: newTextString, \r\n        cursorPos:prevInputState.cursorPos + 1,\r\n        uppercase: prevInputState.uppercase})\r\n      );\r\n    } \r\n  }  \r\n\r\n  const placeCursor = c =>{\r\n    setInputState(prevInputState => ({\r\n      currentCh: prevInputState.currentCh, \r\n      textString: prevInputState.textString, \r\n      cursorPos:c}));\r\n  }\r\n\r\n  return(\r\n    <>\r\n      <div className=\"wrapper\"> \r\n       <div className=\"bkwr\">\r\n         <div className=\"title\" >After you've typed some text, you can place the cursor anywhere on the text to change it.</div>\r\n        <div className=\"box\">\r\n          <Box \r\n            text={inputState.textString}\r\n            updateCursor={placeCursor}\r\n            getCursor={inputState.cursorPos}\r\n          />\r\n        </div>\r\n        <div className=\"keyb\">\r\n          <Keyboard \r\n            onPressKey={pressKey}\r\n            caps = {inputState.uppercase}\r\n          />\r\n        </div>\r\n        </div>\r\n        <div className=\"hist\">\r\n        <div className=\"history\">\r\n         \r\n          <History \r\n            history={historyState}\r\n            addState={addStateHandler}\r\n          />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default Core;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Core from \"./containers/Core.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Core/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}