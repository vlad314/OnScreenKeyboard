{"version":3,"sources":["components/box.js","components/keys/key.js","components/keyboard.js","components/history.js","containers/Core.js","App.js","serviceWorker.js","index.js"],"names":["Box","text","updateCursor","getCursor","textBox","useRef","console","log","useEffect","current","focus","setSelectionRange","value","onClick","event","s","target","selectionStart","ref","Key","buttonId","onPressKey","className","id","Keyboard","caps","map","el","index","key","History","history","addState","textString","Core","props","useState","currentCh","cursorPos","uppercase","inputState","setInputState","historyState","setHistoryState","c","prevInputState","character","before","after","newTextString","substr","concat","toUpperCase","temp","tempList","push","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4d9f922.chunk.js","sourcesContent":["import React, {useEffect, useRef} from 'react';\r\n\r\nconst Box = ({text, updateCursor, getCursor}) => {\r\n  \r\n  let textBox = useRef(null);\r\n  console.log(\"in box cursor\" + getCursor);\r\n\r\n  useEffect(() => {\r\n    textBox.current.focus();\r\n    textBox.current.setSelectionRange(getCursor,getCursor);\r\n  }, [text,getCursor]);\r\n\r\n  const cursorSel = event => {\r\n    let s = event.target.selectionStart;\r\n    console.log(\"in box \" +s);\r\n    updateCursor(s);\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <textarea value={text}  onClick={cursorSel} ref={textBox} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Box;","import React from 'react';\r\nimport \"./key.css\";\r\n\r\nconst Key = ({buttonId, onPressKey}) => {\r\n  const writeCh = event => {\r\n    onPressKey(buttonId);\r\n  }  \r\n\r\n  return (\r\n    <button className=\"key\" id={buttonId} onClick={writeCh}>{buttonId}</button>\r\n  )\r\n}\r\n\r\nexport default Key;","import React from 'react';\r\n\r\nimport Key from './keys/key.js';\r\nimport \"./keyboard.css\";\r\n\r\nconst Keyboard = ({caps, onPressKey}) => {\r\n  //for encrypting the text\r\n  let row1 = ['1','2','3','4','5','6','7','8','9','0','(',')'];\r\n  let keyBkp = 'Backspace';\r\n  let row2 = ['q','w','e','r','t','y','u','i','o','p','{','}'];\r\n  let row3 = ['a','s','d','f','g','h','j','k','l',';','@'];\r\n  let keyCaps = 'CapsLock';\r\n  let row4 = ['z','x','c','v','b','n','m',',','.','?'];\r\n  let Space = ' ';\r\n\r\n  // let keys = {keyA:chars[0], keyB:chars[1]};\r\n  // let keyBkp = 'Bkp';\r\n  // let keyCaps = 'Caps';\r\n\r\n  return (\r\n    <>\r\n      <div className=\"keyboardGrid\">\r\n\r\n        <div className=\"kbrow1\">\r\n          {row1.map((el, index) => {\r\n              console.log(\"el\");\r\n              console.log(el);\r\n              return <Key key={index}  className=\"key\" buttonId={el} onPressKey={onPressKey} />\r\n            })}\r\n            <Key   className=\"key\" buttonId={keyBkp} onPressKey={onPressKey} />\r\n        </div>\r\n\r\n        <div className=\"kbrow2\">\r\n          {row2.map((el, index) => {\r\n              console.log(\"el\");\r\n              console.log(el);\r\n              return <Key key={index}  className=\"key\" buttonId={el} onPressKey={onPressKey}/>\r\n            })}\r\n        </div>\r\n\r\n        <div className=\"kbrow3\">\r\n          {row3.map((el, index) => {\r\n              console.log(\"el\");\r\n              console.log(el);\r\n              return <Key key={index}  className=\"key\" buttonId={el}  onPressKey={onPressKey}/>\r\n            })}\r\n            <Key   className=\"key\" buttonId={keyCaps} onPressKey={onPressKey} />\r\n        </div>\r\n\r\n        <div className=\"kbrow4\">\r\n          {row4.map((el, index) => {\r\n            console.log(\"el\");\r\n            console.log(el);\r\n            return <Key key={index}  className=\"key\" buttonId={el} onPressKey={onPressKey}/>\r\n          })}\r\n        </div>\r\n\r\n        <div className=\"spaceBar\">\r\n          <Key  className=\"key\" buttonId={Space} onPressKey={onPressKey} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Keyboard;\r\n\r\n\r\n// {/* \r\n//           <Key  className=\"key\" buttonId={row1[0]} onPressKey={onPressKey} />\r\n//           <Key  className=\"key\"  buttonId={row1[0]} onPressKey={onPressKey} />\r\n//           <Key  className=\"key\" buttonId={row1[0]} onPressKey={onPressKey} /> */}","\r\nimport React from 'react';\r\n\r\nconst History = ({history, addState}) => {\r\n  \r\n  const saveState = event => {\r\n    addState();\r\n  }  \r\n\r\n  return (\r\n    <div>\r\n      <button className=\"save\" onClick={saveState}>Save</button>\r\n      <div>\r\n        {history.map((el, index) => {\r\n          console.log(\"el\");\r\n          console.log(el);\r\n          return <div key={index}>{el.textString}</div>\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default History;","import React, {useState, useEffect} from 'react';\r\n\r\nimport Box from \"../components/box.js\";\r\nimport Keyboard from \"../components/keyboard.js\";\r\nimport History from \"../components/history.js\";\r\n\r\nconst Core = props => {\r\n\r\n\r\n const[inputState, setInputState]  = useState({currentCh: \"\", textString: \"\", cursorPos:0, uppercase:false});\r\n const [historyState, setHistoryState] = useState([{}]);\r\n\r\n  const addStateHandler = () => {\r\n    let temp = {... inputState};\r\n    let tempList = [...historyState];\r\n    console.log(\"tempList\");\r\n    console.log(tempList);\r\n    tempList.push(temp);\r\n    setHistoryState(tempList);\r\n  }\r\n\r\n  const pressKey = character => {\r\n    let before = \"\";\r\n    let after = \"\";\r\n    let newTextString = \"\";\r\n  if (character === \"Caps\"){\r\n      setInputState(prevInputState => ({\r\n        currentCh: prevInputState.currentCh, \r\n        textString: prevInputState.textString, \r\n        cursorPos:prevInputState.cursorPos,\r\n        uppercase: !prevInputState.uppercase})\r\n      );\r\n    }\r\n    else if (character === \"Backspace\"){\r\n      before = inputState.textString.substr(0,inputState.cursorPos-1);\r\n      after = inputState.textString.substr(inputState.cursorPos);\r\n      newTextString = newTextString.concat(before);\r\n      newTextString = newTextString.concat(after);\r\n      setInputState(prevInputState => ({\r\n        currentCh: character, \r\n        textString: newTextString, \r\n        cursorPos:prevInputState.cursorPos-1,\r\n        uppercase: prevInputState.uppercase})\r\n      );\r\n    }\r\n    else {\r\n      before = inputState.textString.substr(0,inputState.cursorPos);\r\n      // console.log(before);\r\n      after = inputState.textString.substr(inputState.cursorPos);//change to cursorPos+1 for Insert\r\n      newTextString = newTextString.concat(before);\r\n      if (inputState.uppercase === true){\r\n        newTextString = newTextString.concat(character.toUpperCase());\r\n      } else {\r\n        newTextString = newTextString.concat(character);\r\n      }\r\n      newTextString = newTextString.concat(after);\r\n      setInputState(prevInputState => ({\r\n        currentCh: character, \r\n        textString: newTextString, \r\n        cursorPos:prevInputState.cursorPos + 1,\r\n        uppercase: prevInputState.uppercase})\r\n      );\r\n    } \r\n  }  \r\n\r\n  const placeCursor = c =>{\r\n    setInputState(prevInputState => ({\r\n      currentCh: prevInputState.currentCh, \r\n      textString: prevInputState.textString, \r\n      cursorPos:c}));\r\n  }\r\n\r\n  return(\r\n    <>\r\n      <div className=\"wrapper\">\r\n        <Box \r\n          text={inputState.textString}\r\n          updateCursor={placeCursor}\r\n          getCursor={inputState.cursorPos}\r\n        />\r\n        <Keyboard \r\n          onPressKey={pressKey}\r\n          caps = {inputState.uppercase}\r\n        />\r\n        <History className=\"history\"\r\n          history={historyState}\r\n          addState={addStateHandler}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default Core;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Core from \"./containers/Core.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Core/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}